---
- name: Provision Ubuntu server with Docker, K3s, Terraform & LocalStack
  hosts: ubuntu_servers
  become: true
  vars_files:
    - group_vars/all.yml

  vars_prompt:
    - name: install_docker
      prompt: "Install Docker?"
      private: false
      default: "yes"
    - name: install_k3s
      prompt: "Install K3s?"
      private: false
      default: "{{ install_k3s }}"
    - name: install_terraform
      prompt: "Install Terraform?"
      private: false
      default: "{{ install_terraform }}"
    - name: install_go
      prompt: "Install Go?"
      private: false
      default: "{{ install_go }}"
    - name: install_localstack
      prompt: "Install LocalStack?"
      private: false
      default: "{{ install_localstack }}"
    - name: install_k9s
      prompt: "Install K9s?"
      private: false
      default: "{{ install_k9s }}"
    - name: install_oh_my_zsh
      prompt: "Install Oh My Zsh?"
      private: false
      default: "{{ install_oh_my_zsh }}"
    - name: set_zsh_as_default
      prompt: "Set Zsh as default shell?"
      private: false
      default: "{{ set_zsh_as_default }}"
    - name: install_helm
      prompt: "Install Helm?"
      private: false
      default: "yes"

  tasks:

  - name: ensure apt cache is up to date
    apt:
      update_cache: "{{ apt_update_cache }}"

  - name: install common prerequisites
    apt:
      name:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg
        - git
        - lsb-release
        - zsh
        - unzip
      state: present

  #
  # 1) Docker
  #
  - name: Install Docker
    when: install_docker | bool
    block:
      - name: add Docker GPG key
        apt_key:
          url: "{{ docker_gpg_key_url }}"
          state: present

      - name: add Docker apt repo
        apt_repository:
          repo: >
            deb [arch=amd64] {{ docker_apt_repo }}
            {{ ansible_lsb.codename }} {{ docker_channel }}
          state: present

      - name: install Docker packages
        apt:
          name: "{{ docker_packages }}"
          state: latest
          update_cache: yes

      - name: ensure docker service is started & enabled
        service:
          name: docker
          state: started
          enabled: yes

  #
  # 2) K3s
  #
  - name: install K3s via upstream install script
    when: install_k3s | bool
    block:
      - name: fetch k3s install script
        get_url:
          url: "https://get.k3s.io"
          dest: /tmp/install_k3s.sh
          mode: '0755'

      - name: run k3s installer
        shell: |
          K3S_VERSION="{{ k3s_version }}" \
          INSTALL_K3S_CHANNEL="{{ k3s_channel }}" \
          {{ k3s_extra_args }} \
          sh /tmp/install_k3s.sh
        args:
          executable: /bin/bash

      - name: ensure k3s is running
        service:
          name: k3s
          state: started
          enabled: yes

  #
  # 3) Terraform
  #
  - name: Install Terraform
    when: install_terraform | bool
    block:
      - name: download Terraform zip
        get_url:
          url: "{{ terraform_binary_src }}"
          dest: /tmp/terraform_{{ terraform_version }}_linux_amd64.zip
          mode: '0644'
        register: tf_download

      - name: download Terraform checksums
        get_url:
          url: "{{ terraform_checksums_url }}"
          dest: /tmp/terraform_SHA256SUMS
          mode: '0644'

      - name: verify Terraform checksum
        shell: |
          cd /tmp
          grep "terraform_{{ terraform_version }}_linux_amd64.zip" terraform_SHA256SUMS | sha256sum -c -

      - name: unzip Terraform binary
        unarchive:
          src: /tmp/terraform_{{ terraform_version }}_linux_amd64.zip
          dest: /usr/local/bin/
          remote_src: yes
          mode: '0755'

      - name: create terraform wrapper symlink "tf"
        file:
          src: "{{ terraform_bin_dir }}/terraform"
          dest: "{{ terraform_bin_dir }}/tf"
          state: link
          force: yes

      - name: create a tflocal wrapper
        when: create_terraform_wrappers | bool
        copy:
          dest: "{{ terraform_bin_dir }}/tflocal"
          mode: '0755'
          content: |
            #!/usr/bin/env bash
            export AWS_ACCESS_KEY_ID="{{ aws_access_key_id }}"
            export AWS_SECRET_ACCESS_KEY="{{ aws_secret_access_key }}"
            export AWS_DEFAULT_REGION="{{ aws_default_region }}"
            export EDGE_PORT="{{ localstack_edge_port }}"
            export LOCALSTACK_HOST="localhost"
            export LOCALSTACK_ENDPOINT="{{ localstack_endpoint }}"
            # you can extend this wrapper to inject Terraform provider plugin paths if needed
            exec terraform "$@"

  #
  # 4) Go
  #
  - name: install Go
    when: install_go | bool
    block:
      - name: download Go tarball
        get_url:
          url: "{{ go_download_url }}"
          dest: "/tmp/go{{ go_version }}.linux-amd64.tar.gz"
          checksum: "sha256:{{ go_checksum }}"
          mode: '0644'

      - name: extract Go tarball
        unarchive:
          src: "/tmp/go{{ go_version }}.linux-amd64.tar.gz"
          dest: "{{ go_install_dir }}"
          remote_src: yes

      - name: add Go to system-wide PATH
        copy:
          dest: /etc/profile.d/go.sh
          content: 'export PATH=$PATH:{{ go_install_dir }}/go/bin'
          mode: '0755'

  #
  # 5) K9s
  #
  - name: install K9s
    when: install_k9s | bool
    block:
      - name: download K9s tarball
        get_url:
          url: "{{ k9s_download_url }}"
          dest: "/tmp/k9s_Linux_amd64.tar.gz"
          mode: '0644'

      - name: extract K9s tarball
        unarchive:
          src: "/tmp/k9s_Linux_amd64.tar.gz"
          dest: "/tmp/"
          remote_src: yes

      - name: move k9s binary to /usr/local/bin
        copy:
          src: /tmp/k9s
          dest: /usr/local/bin/k9s
          remote_src: yes
          mode: '0755'

  #
  # 6) LocalStack (Docker)
  #
  - name: Install LocalStack
    when: install_localstack | bool
    block:
      - name: pull LocalStack Docker image
        docker_image:
          name: "{{ localstack_docker_image }}"
          tag: "{{ localstack_version }}"
          source: pull

      - name: run LocalStack container
        docker_container:
          name: "{{ localstack_container_name }}"
          image: "{{ localstack_docker_image }}:{{ localstack_version }}"
          state: started
          restart_policy: unless-stopped
          env:
            SERVICES: "{{ localstack_services }}"
            EDGE_PORT: "{{ localstack_edge_port }}"
          ports:
            - "{{ localstack_host_port }}:{{ localstack_edge_port }}"

  #
  # 7) final cleanup
  #
  - name: cleanup terraform temp files
    file:
      path: "/tmp/terraform_{{ terraform_version }}_linux_amd64.zip"
      state: absent
    when: install_terraform | bool

  - name: cleanup go temp files
    file:
      path: "/tmp/go{{ go_version }}.linux-amd64.tar.gz"
      state: absent
    when: install_go | bool

  - name: cleanup k3s install script
    file:
      path: /tmp/install_k3s.sh
      state: absent
    when: install_k3s | bool

  - name: cleanup k9s temp files
    file:
      path: "/tmp/k9s_Linux_amd64.tar.gz"
      state: absent
    when: install_k9s | bool

  #
  # 8) Oh My Zsh
  #
  - name: Install Oh My Zsh
    when: install_oh_my_zsh | bool
    block:
      - name: clone oh-my-zsh
        git:
          repo: https://github.com/ohmyzsh/ohmyzsh.git
          dest: "/home/{{ ansible_user }}/.oh-my-zsh"
          version: master
          accept_hostkey: yes

      - name: create .zshrc from template
        template:
          src: templates/zshrc.j2
          dest: "/home/{{ ansible_user }}/.zshrc"
          owner: "{{ ansible_user }}"
          group: "{{ ansible_user }}"
          mode: '0644'

      - name: set zsh as default shell
        when: set_zsh_as_default | bool
        user:
          name: "{{ ansible_user }}"
          shell: /bin/zsh
  
  - name: install helm
    include_role:
      name: helm